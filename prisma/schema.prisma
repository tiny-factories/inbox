// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        String    @id @default(cuid())
    title     String?
    content   String
    published Boolean   @default(false)
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    author    User?     @relation(fields: [authorId], references: [id])
    authorId  String?
    inbox     Inbox?    @relation(fields: [inboxId], references: [id])
    inboxId   String?
    tags      Tag[]
    Comment   Comment[]
}

model Inbox {
    id          String    @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt
    public      Boolean   @default(false)
    owners      User[]

    Post Post[]
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    text      String
    author    User?    @relation(fields: [authorId], references: [id])
    authorId  String?
    postId    String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Tag {
    id    String @id @default(cuid())
    name  String @unique
    posts Post[]
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    posts         Post[]
    accounts      Account[]
    sessions      Session[]
    followedBy    Follows[] @relation("following")
    following     Follows[] @relation("follower")
    Inbox         Inbox?    @relation(fields: [inboxId], references: [id])
    inboxId       String?
    Comment       Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Follows {
    follower    User   @relation("follower", fields: [followerId], references: [id])
    followerId  String
    following   User   @relation("following", fields: [followingId], references: [id])
    followingId String

    @@id([followerId, followingId])
}


